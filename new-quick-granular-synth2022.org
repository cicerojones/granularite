* Quick

** based on work in the other file with earlier granular-synth efforts

There is a lot of development work in an older file, not part of this project.

** have you got everything in order?

clojure and overtone installed and up and running with a MIDI controller connected?

[[file:README.org][file:~/repos/granularite/README.org]]

No? [[file:README.org::*sound test][sound test]]

#+begin_src clojure
(demo 10 (sin-osc (abs  (* 10000 (brown-noise:kr)))))
#+end_src

#+RESULTS:
: #<synth-node[loading]: granularite.cf44/audition-synth 33>

#+begin_src clojure
(stop)
#+end_src

#+RESULTS:

** 4-5 blocks to get brown-noise sound
:PROPERTIES:
:header-args: :results silent
:END:

*** need a NOT-HARDCODED-PATH to local sounds

#+begin_src clojure
  ;; (def local-machine "Users/oi")
    ;; (def path-to-sounds "/Applications/SuperCollider/SuperCollider.app/Contents/Resources/")
  ;; (def path-to-sounds (str local-machine "/Documents/sounds/"))
     ;; (def path-to-mono (str path-to-sounds "sounds/all-mono/"))
(def path-to-sounds (str "~/Documents/sounds/"))
#+end_src

"/Users/oi/Documents/sounds/brown30-mono.wav"

#+begin_src clojure
(def variation1 (load-sample (str path-to-sounds "brown30-mono.wav")))
#+end_src

#+BEGIN_SRC clojure :results silent
  (defsynth tgrains-line-synth [buffer 0 trate 1 dur-numerator 8 amp 0.8 centerpos 0 duration-mult 2]
    (out 0 (pan2 
            (let [track-len (buf-dur:kr buffer)
                  trate trate
                  dur (/ dur-numerator trate)
                  clk (impulse:ar trate)
                  centerpos (line:kr centerpos track-len (* duration-mult track-len))  ]
              (t-grains:ar 1
                           clk
                           buffer
                           1
                           centerpos
                           dur
                           0
                           amp
                           2)))))
#+END_SRC

#+begin_src clojure
(def line-for-variation1 (tgrains-line-synth :buffer 0))
#+end_src


#+begin_src clojure
(stop)
#+end_src


** make changes to the basic synth

#+begin_src clojure
(ctl line-for-variation1  :trate 0.3 :dur-numerator 12)
#+end_src

#+RESULTS:
: #<synth-node[live]: granularif44/tgrains-line-synth 40>




** load a different sound source
:PROPERTIES:
:header-args: :results silent
:END:

*** ideally there are no problems
On this machine there is the following file:

/Users/oi/Documents/sounds/slow-Indian-dulcimer-MONO.mp3

BUT, you need uncompressed audio!
Unable to read file - perhaps path is not a valid audio file (only ["wav" "aiff" "aif"] supported) : /Users/oi/Documents/sounds/slow-Indian-dulcimer-MONO.mp3


*** there are alwys problems

Don't show them here!

*** change source file and start ordinary playback

#+begin_src clojure
(def variation3 (load-sample (str path-to-sounds "SHORT-slow-Indian-dulcimer-MONO.wav")))
#+end_src

#+BEGIN_SRC clojure :session getting-started
(defsynth reverb-on-left []
  (let [dry (play-buf 1 variation3)
    wet (free-verb dry 1)]
    (out 0 [wet dry])))

(reverb-on-left)
  #+END_SRC

*** any difference between an inst and a synth def?

Just to hear what the plain, whole variation3 sounds like (it's short!)

#+BEGIN_SRC clojure
(definst gran1 [] (play-buf 1 variation3))

(gran1)
#+END_SRC

Let's get a longer sample

*** try again with the granular synth using a line

#+begin_src clojure
(def line-for-variation2 (tgrains-line-synth variation3))
#+end_src

#+begin_src clojure
(ctl line-for-variation2  :trate 0.3 :dur-numerator 12)
#+end_src

*** further improve source

#+begin_src clojure
(def variation4 (load-sample (str path-to-sounds "30seconds-slow-Indian-dulcimer-MONO.wav")))
#+end_src

#+begin_src clojure
(def line-for-variation4 (tgrains-line-synth variation4))
#+end_src

* Medium quick

** to interact with buffer using MIDI, start with mouse
:PROPERTIES:
:header-args: :results silent
:END:

#+begin_src clojure
(midi-connected-devices)
#+end_src


Note how this synth differs (from tgrains-line-synth) in its use of a "line" for centerpos.
Doc string
"Summary of arglist: buffer; trate; amp; centerpos; AND then reverb args...
 roomsize; revtime; damping; inputbw; drylevel; earlyreflevel; taillevel; maxroomsize"

#+BEGIN_SRC clojure :results silent
  (defsynth mouse-rand-grain3  [buffer 0 trate 1 dur-numerator 12 amp 0.8 centerpos 0 roomsize 10 revtime 5 damping 0.5 inputbw 0.2 drylevel 0.1 earlyreflevel 0.7 taillevel 0.5  maxroomsize 300]
    (let [trate (mouse-y:kr 0.5 20)
	  track-len (buf-dur:kr buffer)
	  dur (/ dur-numerator trate)
	  clk (impulse:kr trate)
	  line-centerpos (+ (mouse-x:kr 0 (buf-dur:kr buffer))
			    (line:kr 0 (* 0.5 track-len) (* 2 track-len))
			    (t-rand:kr 0 0.01 clk))]
      (out 0 (pan2 (g-verb  
		    (t-grains:ar 1 clk buffer 1 ;; mouse x, line, rand, reverb
				 line-centerpos dur 
				 0 amp 2 ) )))))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(def pasdaction-grand (mouse-rand-grain3 variation4 :amp 0.1))
#+END_SRC

#+begin_src clojure
(ctl pasdaction-grand :amp 0.9 :trate 0.3 :dur-numerator 12)
#+end_src

#+begin_src clojure
(stop)
#+end_src

** see README for what the minilogue used for control change channels

[[file:README.org][file:~/repos/granularite/README.org]]
[[file:README.org::*Minilogue complete CC numbers][Minilogue complete CC numbers]]

** begin setting up MIDI and refs

*** "simple" explanation

Explain ... in order to understand what you want to do.

- changing knobs on the Minilogue
  - change aspects of the currently playing sound

So, this can happen a few different ways.

The last time I did this I relied on

- a particular synth defintion :: say, mouse-rand-grain3 (currently running nicely)
- an event-handler function
  - this function relied on the synth being called with certain argument "prefixs"


some synth definitions
- tgrains-line-synth [buffer 
- reverb-on-left []           
- mouse-rand-grain3  [buffer
- minirand-ccgrain-no-line  
- tgrains-line-synth [buff
- mouse-rand-grain3  [buff


Some "event handler" "meta-definitions" (i.e. takes an active-synth and a "double-colon-name)
- cc-minilogue1-grains
- mini-scaling-test
- update-mini-scaling-test

(remove-event-handler ::obess)                                     
(remove-event-handler ::mini-obsess)                               
(remove-event-handler ::update-mini-obsess)                        

(remove-event-handler ::test-range-high)                           
(remove-event-handler ::print-noteons)                             
(remove-event-handler ::print-noteons-vels)                        
(remove-event-handler ::set-current-val-scale-and-play)            
(remove-event-handler ::pad-control-yancey-centerpos-in-samples)


See below for actual usage of first example

defining
[[*actual definition of a synth and an accompanying event-handler][actual definition of a synth and an accompanying event-handler]]

running
[[*playback and realtime calls][playback and realtime calls]]

*** Understanding set-up defintions

See the following link to all-apollos.

Provides context for understanding the use of "cc refs" in this function.

[[file:all-apollos.org][file:~/repos/granularite/all-apollos.org]]
[[id:ABD50379-307B-44F0-BA31-7540257029DC][minilogue for grains]]


The "problem" with cc-minilogue1-grains-event-handler (note, this name is only used as an org-babel tag) is what?

It hard-codes in the actual output ranges allowed for controlling the "active-synth."

It also is relatively fixed, as a function.

That is, it really only takes a particular synth as an argument.

Apart from this, all you can really do is give a name to the event handler you are creating for this synth.


*** actual definition of a synth and an accompanying event-handler

Strip out the documentation string for org and emacs and ivy searching

"Summary of arglist: buffer; trate; amp; centerpos..."

#+NAME: minirand-ccgrain-no-line
#+BEGIN_SRC clojure :results silent
  (defsynth minirand-ccgrain-no-line    [buffer 0 cc34 1 cc35 12 cc36 0 cc37 0.8 cc41 0.01]
    (let [trate cc34 ;;(mouse-y:kr 0.5 20)
	  track-len (buf-dur:kr buffer)
	  dur (/ cc35 trate)
	  clk (impulse:kr trate)
	  line-centerpos (+ cc36 (t-rand:kr 0 cc41 clk))
	  ]
      (out 0 (pan2 
	      (t-grains:ar 1 clk buffer 1 ;; cc rand arg, all minilogue cc args
			   line-centerpos dur
			   0 cc37 2)))))

#+END_SRC

#+NAME: cc-minilogue1-grains-event-handler
#+BEGIN_SRC clojure :results silent
(defn cc-minilogue1-grains [active-synth double-colon-name]
  (on-event
   [:midi :control-change]
   (fn [{cc-channel :note vel :velocity}]
     (case cc-channel
       34 (ctl active-synth :cc34 (scale-range vel 1 127 0.1 10))
       35 (ctl active-synth :cc35 (scale-range vel 1 127 1 24))
       36 (ctl active-synth :cc36 (scale-range vel 1 127 0 100)) 
;; consider the following for a choppier, but actual buf-dur length
;; (ctl active-synth :cc36 (scale-range vel 1 127 0 190))
       37 (ctl active-synth :cc37 (scale-range vel 1 127 0 1))
       41 (ctl active-synth :cc41 (scale-range vel 1 127 0.01 1))
       :else nil
       ))
   double-colon-name))
#+END_SRC

See below explanation for 34, 35 etc.:

[[*notes on controlling][notes on controlling]]

*** playback and realtime calls

Start the synth

#+NAME: apotheose-cloud
#+BEGIN_SRC clojure :results silent
  (def obessive (minirand-ccgrain-no-line 1))
  ;; (def obessive (minirand-ccgrain-no-line 2)) 
#+END_SRC


So, this is going to enable what?

See just below:
[[*notes on controlling][notes on controlling]]

Run the handler
#+NAME: apotheose-cloud-handler
#+BEGIN_SRC clojure :results silent
(cc-minilogue1-grains obessive ::obess)
#+END_SRC

(Org node jumping doesn't like a babel block at the end of a node?)
*** use the handler

In order for minirand-ccgrain-no-line synth handled by cc-minilogue1-grains ::obess

- VCO1 Shape :: centerpos 36
- VCO1 Pitch :: trate 34
- VCO2 Pitch :: dur-numerator 35
- Cross-mod :: t-rand max 41
- VCO2 Shape :: amplitude 37

Now, maybe record the interaction? Or move on.

*** Kill the handler

#+BEGIN_SRC clojure :results silent
(remove-event-handler ::obess)
#+END_SRC


What will happen when you "kill the node!" (and not the handler) and keep "playing" as it were?

The event-handler will complain like so:

#+begin_src clojure
java.lang.Exception:

Error - inactive  node modification attempted for node #<synth-node[destroyed]: graf44/minirand-ccgrain-no-line 38> whilst controlling the following values: (:cc34 5.678571428571428)
#+end_src

*** notes on controlling obess

VCO1 Shape is 36 (centerpos), which relatively quickly takes a noticeable effect.

It is used in the following way, affecting the center position

#+begin_src clojure
;; line-centerpos (+ cc36 (t-rand:kr 0 cc41 clk))
#+end_src

Cross-mod depth is 41, which is slow to take effect as part of the t-rand.

As it sets the "hi" value, it has a most noticeable effect on the "width", say, of the range of random numbers generated.

#+begin_src clojure
overtone.live/t-rand
([lo hi trig])
  
  [lo 0.0, hi 1.0, trig 0.0]

  lo   - Minimum value of generated float 
  hi   - Maximum value of generated float 
  trig - Trigger signal 

  Generates a random float value in uniform distribution 
  from lo to hi each time the trig signal changes from 
  nonpositive to positive values 

#+end_src



VCO1 Pitch is 34, which is slow to take effect and most noticeable after 36.

34 works as part of the "clk" to affect the rate at which the t-rand is triggered.

37 (VCO2 shape) is the amplitude.

35 is the "dur-numerator", which will affect the relative "duration" of each grain.

A low enough value creates a kind of "tremolo" effect of volume going in and out.

34 and 35 work together nicely.

A low enough value for 41 creates a largely "mechanical" effect, with the randomness eliminated.

** understanding the synths


*** documentation for t-grains

[[file:granulars-copied-from-post-tonal.org::*t-grains documentation][t-grains documentation]]

[[file:all-apollos.org][file:~/repos/granularite/all-apollos.org]]

#+begin_src clojure
		  [num-channels 2, ;; output
		   trigger 0, ;; "at each trigger"
		   bufnum 0, 
		   rate 1, ;; 2.0 octave up, 0.5 down, -1. backwards
		   center-pos 0, ;; position in seconds
		   dur 0.1, ;; duration of grain
		   pan 0.0, ;; -1 to 1, is left to right
		   amp 0.1, ;; amplitude of grain
		   interp 4 ;; interpolaltion can be none, linear, cubic
		   ]
#+end_src


|                 | num-channels | x    |
|                 | trigger      | x    |
|                 | bufnum       | x    |

| VCO1 pitch      | rate         | cc34 |
| VCO1 shape      | dur          | cc36 |

Is this the correct "parameter" for cc35? Depends on the synth?
| VCO2 Pitch      | center-pos   | cc35 |
| VCO2 shape      | pan          | cc37 |

| Cross Mod Depth | amp          | cc41 |

|                 | interp       |      |

* Longer, understanding real uses of "resetting atoms"

** first of all, what are your synth

#+begin_src clojure
  ;; just for easy reading; NOT FOR EVAL!

    (defsynth tgrains-line-synth [buffer 0 trate 1 dur-numerator 8 amp 0.8 centerpos 0 duration-mult 2]
    (defsynth mouse-rand-grain3  [buffer 0 trate 1 dur-numerator 12 amp 0.8 centerpos 0 roomsize 10 revtime 5 damping 0.5 inputbw 0.2 drylevel 0.1 earlyreflevel 0.7 taillevel 0.5  maxroomsize 300]
    (defsynth minirand-ccgrain-no-line [buffer 0 cc34 1 cc35 12 cc36 0 cc37 0.8 cc41 0.01]
#+end_src

** code context

For context
[[file:all-apollos.org][file:~/repos/granularite/all-apollos.org]]
[[file:all-apollos.org::*defining][defining]]

** new synth with "no line"

consider whether to use the short "1" buffer or the longer (30-seconds) "2" buffer.

Start this up and then work through the atoms below:

#+NAME: apotheose-cloud
#+begin_src clojure :results silent
    (def obessive (minirand-ccgrain-no-line 2))

  ;; (def obessive (minirand-ccgrain-no-line 1))
#+END_SRC

** atoms

Evaluating atoms takes time?

#+BEGIN_SRC clojure :results silent
  (def offset-ones (atom 0))
  (def offset-tens (atom 0))
  (def offset-hundreds (atom 0)) 
  (def ranger-ones (atom 0))
  (def ranger-tens (atom 0))
  (def ranger-hundreds (atom 0)) 
  (def offset (atom 1))
  (def ranger (atom 1))

  (def amp-offset (atom 0))
  (def amp-range (atom 0))
#+END_SRC

** new event handler: mini-scaling-test

*** explanations

Note that--in which synth handler?--/only/ 36 aka centerpos is being noticeably affected ("at first").

The range the centerpos is being scaled to...

starts at "offset" and goes as far as the ranger takes it.

This is mostly useful if you want a lot of options for where to search in the buffer.

16 17 18 will have "exponentially" greater effects.
20 21 22 also.

So, changes to them will only be noticeable AFTER you then change...which controller?

That's right 36!

That is, setting the offset and then setting how "far" the line is being sent.

Doesn't seem to do much :(

Unless, you have a longer sound file in there.

And you proceed systematically through changing the refs.

minimize 35 to make for "tremolo" amplitude effect

tailor 34 for speed or "rate" of tremolo

minimize 41 to limit the "mechanicalness" of the playback

Then go to 36 to dial around the centerpos.

This will then make change to 18 and 22 more noticeable.

Your "dialing" around will seem more different if you modify these at the same time as spinning 36.

*** code blocks

Slightly updated, on the way to being renamed "updated"

#+begin_src clojure
    (defn mini-scaling-test [active-synth double-colon-name]
      (on-event
       [:midi :control-change]
       (fn [{cc-channel :note vel :velocity}]
	 (case cc-channel

	   16 (do (reset! offset-ones (* 1 (scale-range vel 1 127 0 99)))
		  (reset! offset (+ @offset-ones @offset-tens @offset-hundreds))
		  (test active-synth :cc36 @offset (+ @offset @ranger) vel))
	   17 (do (reset! offset-tens (* 10 (scale-range vel 1 127 0 99)))
		  (reset! offset (+ @offset-ones @offset-tens @offset-hundreds))
		  (test active-synth :cc36 @offset (+ @offset @ranger) vel))
	   18 (do (reset! offset-hundreds (* 100 (scale-range vel 1 127 0 99)))
		  (reset! offset (+ @offset-ones @offset-tens @offset-hundreds))
		  (test active-synth :cc36 @offset (+ @offset @ranger) vel))

	   20 (do (reset! ranger-ones (* 1 (scale-range vel 1 127 0 99)))
		  (reset! ranger (+ @ranger-ones @ranger-tens @ranger-hundreds))
		  (test active-synth :cc36 @offset (+ @offset @ranger) vel))
	   21 (do (reset! ranger-tens (* 10 (scale-range vel 1 127 0 99)))
		  (reset! ranger (+ @ranger-ones @ranger-tens @ranger-hundreds))
		  (test active-synth :cc36 @offset (+ @offset @ranger) vel))
	   22 (do (reset! ranger-hundreds (* 100 (scale-range vel 1 127 0 99)))
		  (reset! ranger (+ @ranger-ones @ranger-tens @ranger-hundreds))
		  (test active-synth :cc36 @offset (+ @offset @ranger) vel))
	   34 (ctl active-synth :cc34 (scale-range vel 1 127 0.1 10))
	   35 (ctl active-synth :cc35 (scale-range vel 1 127 1 24))
	   36 (ctl active-synth :cc36 (scale-range vel 1 127 @offset (+ @offset @ranger)))
	   37 (ctl active-synth :cc37 (scale-range vel 1 127 0 1))
	   41 (ctl active-synth :cc41 (scale-range vel 1 127 0.01 1))
	   ))
       double-colon-name))

#+end_src

#+RESULTS:
: #'granularite.core/mini-scaling-test

*** document the minilogue CC knobs
new cc knobs used

#+begin_src clojure
;; block evaluation

    { name: "AMP EG ATTACK", cc: 16 },
    { name: "AMP EG DECAY", cc: 17 },
    { name: "AMP EG SUSTAIN", cc: 18 },

    { name: "EG ATTACK", cc: 20 },
    { name: "EG DECAY", cc: 21 },
    { name: "EG SUSTAIN", cc: 22 },

#+end_src

Make specific to amplitude?

#+begin_src clojure
  { name: "LFO RATE", cc: 24 },
  { name: "LFO DEPTH", cc: 26 },
  { name: "VOICE DEPTH", cc: 27 },

#+end_src

*** actually call the event-handler

#+BEGIN_SRC clojure :results silent
(mini-scaling-test obessive ::mini-obsess)
#+END_SRC

Make significantly louder with cc37!
#+begin_src clojure
(ctl obessive :cc37 10)
#+end_src

#+RESULTS:
: #<synth-node[live]: graf44/minirand-ccgrain-no-line 48>

use the "two-hand" handler, with the envelope knobs ordered from smallest to greatest
- start with using VCO1 shape AND 
  - amp EGs affect startpoint cc36 (centerpos) aka "offset"
  - EGs affect "distance from startpoint" aka "ranger"


*** kill the hander: mini-obsess
#+BEGIN_SRC clojure :results silent
(remove-event-handler ::mini-obsess)
;; (remove-event-handler ::obess)
#+END_SRC



#+RESULTS:
: #<synth-node[live]: graf44/minirand-ccgrain-no-line 48>

*** use a whole different audio file (elec. piano)

My "mono sounds" for use of mono converted files

[[file:~/Documents/sounds/][file:~/Documents/sounds/]]

#+begin_src clojure
(def pianos (load-sample (str path-to-sounds "Classic Electric Piano_bip.6.L.aif")))
#+end_src

#+RESULTS:
: #'granularite.core/pianos

#+begin_src clojure
(def obessive (minirand-ccgrain-no-line 3))
#+end_src

#+RESULTS:
: #'granularite.core/obessive

*** use larger "homemade" SY-style piano file

#+begin_src clojure
(def pianos2 (load-sample (str path-to-sounds "strange-MONO2.aif")))
#+end_src

#+RESULTS:
: #'granularite.core/pianos2

#+begin_src clojure
(def obessive (minirand-ccgrain-no-line 4))
#+end_src

#+RESULTS:
: #'granularite.core/obessive

Recall or rename the handler?
#+BEGIN_SRC clojure :results silent
(mini-scaling-test obessive ::mini-obsess)
#+END_SRC


#+begin_src clojure
(ctl obessive :cc37 10)
#+end_src

*** old mini-scaling-test block

  ;; (defn mini-scaling-test [active-synth double-colon-name]
  ;;   (on-event
  ;;    [:midi :control-change]
  ;;    (fn [{cc-channel :note vel :velocity}]
  ;;      (case cc-channel

  ;;        16 (do (reset! offset-ones (* 1 (scale-range vel 1 127 0 99)))
  ;; 	      (reset! offset (+ @offset-ones @offset-tens @offset-hundreds))
  ;; 	      (test active-synth :cc36 @offset (+ @offset @ranger) vel))
  ;;        17 (do (reset! offset-tens (* 10 (scale-range vel 1 127 0 99)))
  ;; 	      (reset! offset (+ @offset-ones @offset-tens @offset-hundreds))
  ;; 	      (test active-synth :cc36 @offset (+ @offset @ranger) vel))
  ;;        18 (do (reset! offset-hundreds (* 100 (scale-range vel 1 127 0 99)))
  ;; 	      (reset! offset (+ @offset-ones @offset-tens @offset-hundreds))
  ;; 	      (test active-synth :cc36 @offset (+ @offset @ranger) vel))

  ;;        20 (do (reset! ranger-ones (* 1 (scale-range vel 1 127 0 99)))
  ;; 	      (reset! ranger (+ @ranger-ones @ranger-tens @ranger-hundreds))
  ;; 	      (test active-synth :cc36 @offset (+ @offset @ranger) vel))
  ;;        21 (do (reset! ranger-tens (* 10 (scale-range vel 1 127 0 99)))
  ;; 	      (reset! ranger (+ @ranger-ones @ranger-tens @ranger-hundreds))
  ;; 	      (test active-synth :cc36 @offset (+ @offset @ranger) vel))
  ;;        22 (do (reset! ranger-hundreds (* 100 (scale-range vel 1 127 0 99)))
  ;; 	      (reset! ranger (+ @ranger-ones @ranger-tens @ranger-hundreds))
  ;; 	      (test active-synth :cc36 @offset (+ @offset @ranger) vel))
  ;;        34 (ctl active-synth :cc34 (scale-range vel 1 127 0.1 10))
  ;;        35 (ctl active-synth :cc35 (scale-range vel 1 127 1 24))
  ;;        36 (ctl active-synth :cc36 (scale-range vel 1 127 @offset (+ @offset @ranger)))
  ;;        37 (ctl active-synth :cc37 (scale-range vel 1 127 0 @amp-offset))
  ;;        24 (do (reset! amp-range (* 2 (scale-range vel 1 127 0 1)))
  ;; 	      (reset! amp-offset (+ @amp-range 10))
  ;; 	      (ctl active-synth :cc37 @amp-offset))

  ;;        ;; (ctl active-synth :cc37 (scale-range vel 1 127 0 1))

  ;;        41 (ctl active-synth :cc41 (scale-range vel 1 127 0.01 1))
  ;;        ))
  ;;    double-colon-name))
  

** begin documenting update

*** new block tries to involve 24 (LFO Rate) for amplitude

#+begin_src clojure
  (defn update-mini-scaling-test [active-synth double-colon-name]
    (on-event
     [:midi :control-change]
     (fn [{cc-channel :note vel :velocity}]
       (case cc-channel

	 16 (do (reset! offset-ones (* 1 (scale-range vel 1 127 0 99)))
		(reset! offset (+ @offset-ones @offset-tens @offset-hundreds))
		(test active-synth :cc36 @offset (+ @offset @ranger) vel))
	 17 (do (reset! offset-tens (* 10 (scale-range vel 1 127 0 99)))
		(reset! offset (+ @offset-ones @offset-tens @offset-hundreds))
		(test active-synth :cc36 @offset (+ @offset @ranger) vel))
	 18 (do (reset! offset-hundreds (* 100 (scale-range vel 1 127 0 99)))
		(reset! offset (+ @offset-ones @offset-tens @offset-hundreds))
		(test active-synth :cc36 @offset (+ @offset @ranger) vel))

	 20 (do (reset! ranger-ones (* 1 (scale-range vel 1 127 0 99)))
		(reset! ranger (+ @ranger-ones @ranger-tens @ranger-hundreds))
		(test active-synth :cc36 @offset (+ @offset @ranger) vel))
	 21 (do (reset! ranger-tens (* 10 (scale-range vel 1 127 0 99)))
		(reset! ranger (+ @ranger-ones @ranger-tens @ranger-hundreds))
		(test active-synth :cc36 @offset (+ @offset @ranger) vel))
	 22 (do (reset! ranger-hundreds (* 100 (scale-range vel 1 127 0 99)))
		(reset! ranger (+ @ranger-ones @ranger-tens @ranger-hundreds))
		(test active-synth :cc36 @offset (+ @offset @ranger) vel))
	 34 (ctl active-synth :cc34 (scale-range vel 1 127 0.1 10))
	 35 (ctl active-synth :cc35 (scale-range vel 1 127 1 24))
	 36 (ctl active-synth :cc36 (scale-range vel 1 127 @offset (+ @offset @ranger)))
	 37 (ctl active-synth :cc37 (scale-range vel 1 127 0 @amp-offset))
	 24 (do (reset! amp-range (* 2 (scale-range vel 1 127 0 1)))
		(reset! amp-offset (+ @amp-range 10))
		(ctl active-synth :cc37 @amp-offset))

	 ;; (ctl active-synth :cc37 (scale-range vel 1 127 0 1))

	 41 (ctl active-synth :cc41 (scale-range vel 1 127 0.01 1))
	 ))
     double-colon-name))
#+end_src

#+RESULTS:
: #'granularite.core/update-mini-scaling-test

#+BEGIN_SRC clojure :results silent
(update-mini-scaling-test obessive ::update-mini-obsess)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(remove-event-handler ::update-mini-obsess)
;; (remove-event-handler ::obess)
#+END_SRC

*** for debugging purposes

You want to involve a println somehow...

Here's an example of printing out the values of the refs being affected
#+begin_src clojure
(= cc-channel 5) (do (reset! cc0-1-lo (scale-range vel 1 127 20 200)) (reset! cc0-2-lo (scale-range vel 1 127 0.5 10)) (println (str @cc0-1-lo) (str @cc0-2-lo)))
#+end_src

#+BEGIN_SRC clojure :results silent
  (on-event [:midi :control-change]
            (fn [{note :note vel :velocity}]
              (cond (= note 2) (do (reset! dst-hi vel)
                                   (println "dst-hi: " @dst-hi))))
              ::test-range-high)

#+END_SRC

#+BEGIN_SRC clojure :results silent
(remove-event-handler ::test-range-high)
#+END_SRC

* using note-on events

** some refs from earlier

#+BEGIN_SRC clojure :results silent
;;; save "centerpos" values
  (def liked-values (atom []))

;;; use current-val to hold current 'centerpos' value
  (def current-val (atom 0))

;;; use cc knob to change high point of maprange destination value
  (def dst-lo (atom 0.01))

  (def dst-hi (atom 1))

;;; determine trate value
  (def trate-ref (atom 1))

;;; determine dur-numerator for tgrains duration
  (def durnumerator-ref (atom 8))
#+END_SRC

** copied from

[[file:all-apollos.org][file:~/repos/granularite/all-apollos.org]]

#+begin_src clojure
  (on-event [:midi :note-on]
	    (fn [{note :note}]
	      (println note))
	    ::print-noteons)
#+end_src

#+RESULTS:
: :added-async-handler

#+BEGIN_SRC clojure :results silent
(remove-event-handler ::print-noteons)
#+END_SRC

#+begin_src clojure
  (on-event [:midi :note-on]
	    (fn [{note :note vel :velocity}]
	      (println (list note vel)))
	    ::print-noteons-vels)
#+end_src


#+BEGIN_SRC clojure :results silent
(remove-event-handler ::print-noteons-vels)
#+END_SRC

#+BEGIN_SRC clojure :results silent
  (on-event [:midi :note-on]
          
            (fn [{note :note}]
              (let [val (deref current-val)]
                (do (reset! current-val (maprange [60 91] [0.0 @dst-hi] note))
                    (ctl gold :centerpos val)
                    (println (round2 val 2)))))
                ::set-current-val-scale-and-play)

#+END_SRC

#+BEGIN_SRC clojure :results silent
(remove-event-handler ::set-current-val-scale-and-play)
#+END_SRC

** stepping centerpos

#+BEGIN_SRC clojure :results silent
(defn swap-centerpos-in-samples-pad [active-synth1 active-synth2]
  (fn [{pad :note}]
    (case pad
      36 (do (swap! centerpos1 #(- % 100)) (ctl active-synth1 :centerpos (/ @centerpos1 44100)))
      37 (do (swap! centerpos1 #(- % 1000)) (ctl active-synth1 :centerpos (/ @centerpos1 44100)))
      38 (do (swap! centerpos2 #(- % 100)) (ctl active-synth2 :centerpos (/ @centerpos2 44100)))
      39 (do (swap! centerpos2 #(- % 1000)) (ctl active-synth2 :centerpos (/ @centerpos2 44100)))
      40 (do (swap! centerpos1 #(+ % 100)) (ctl active-synth1 :centerpos (/ @centerpos1 44100)))
      41 (do (swap! centerpos1 #(+ % 1000)) (ctl active-synth1 :centerpos (/ @centerpos1 44100)))
      42 (do (swap! centerpos2 #(+ % 1000)) (ctl active-synth2 :centerpos (/ @centerpos2 44100)))
      43 (do (swap! centerpos2 #(+ % 10000)) (ctl active-synth2 :centerpos (/ @centerpos2 44100))))))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(on-event [:midi :note-on]
          (swap-centerpos-in-samples-pad yancey-noline goldberg-noline)
          ::pad-control-yancey-centerpos-in-samples)
#+END_SRC

#+BEGIN_SRC clojure :results silent
;; (remove-event-handler ::pad-control-yancey-centerpos-in-samples)
#+END_SRC

#+BEGIN_SRC clojure
(list @centerpos1 @centerpos2)
#+END_SRC

* helpful ~pprint~ documentation of your buffers

#+begin_src clojure :results output
  (for [name [variation1 variation3 variation4]]
    (do  (pprint name) (println)))
#+end_src

#+RESULTS:
#+begin_example
{:id 0,
 :size 1323000,
 :n-channels 1,
 :rate 44100.0,
 :status #<Atom@3d0d43e1: :live>,
 :path "/Users/oi/Documents/sounds/brown30-mono.wav",
 :args {},
 :name "brown30-mono.wav",
 :rate-scale 1.0,
 :duration 30.0,
 :n-samples 1323000}

{:id 1,
 :size 916417,
 :n-channels 1,
 :rate 44100.0,
 :status #<Atom@6b27d58d: :live>,
 :path
 "/Users/oi/Documents/sounds/SHORT-slow-Indian-dulcimer-MONO.wav",
 :args {},
 :name "SHORT-slow-Indian-dulcimer-MONO.wav",
 :rate-scale 1.0,
 :duration 20.780430839002268,
 :n-samples 916417}

{:id 2,
 :size 1218206,
 :n-channels 1,
 :rate 44100.0,
 :status #<Atom@6b053255: :live>,
 :path
 "/Users/oi/Documents/sounds/30seconds-slow-Indian-dulcimer-MONO.wav",
 :args {},
 :name "30seconds-slow-Indian-dulcimer-MONO.wav",
 :rate-scale 1.0,
 :duration 27.62371882086168,
 :n-samples 1218206}

#+end_example
