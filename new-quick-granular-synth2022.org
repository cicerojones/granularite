* Quick

** based on work in the other file with earlier granular-synth efforts

There is a lot of development work in this file

[[file:granular-synth-focused.org][file:~/repos/post-tonal-overtone/docs/orzo/simplest-org-documentation/granular-synth-focused.org]]
[[file:granular-synth-focused.org::*shortest-effective code blocks][shortest-effective code blocks]]

** 4-5 blocks to get brown-noise sound
:PROPERTIES:
:header-args: :results silent
:END:

*** need a NOT-HARDCODED-PATH to local sounds
#+begin_src clojure
    ;; (def path-to-sounds "/Applications/SuperCollider/SuperCollider.app/Contents/Resources/")
 (def path-to-sounds "/Users/oi/Documents/sounds/")
  ;; (def path-to-mono (str path-to-sounds "sounds/all-mono/"))

#+end_src

#+begin_src clojure
(def variation1 (load-sample (str path-to-sounds "brown30-mono.wav")))
#+end_src

#+BEGIN_SRC clojure :results silent
  (defsynth tgrains-line-synth [buffer 0 trate 1 dur-numerator 8 amp 0.8 centerpos 0 duration-mult 2]
    (out 0 (pan2 
            (let [track-len (buf-dur:kr buffer)
                  trate trate
                  dur (/ dur-numerator trate)
                  clk (impulse:ar trate)
                  centerpos (line:kr centerpos track-len (* duration-mult track-len))  ]
              (t-grains:ar 1
                           clk
                           buffer
                           1
                           centerpos
                           dur
                           0
                           amp
                           2)))))
#+END_SRC

#+begin_src clojure
(def line-for-variation1 (tgrains-line-synth :buffer 0))
#+end_src


#+begin_src clojure
(stop)
#+end_src


** make changes to the basic synth

#+begin_src clojure
(ctl line-for-variation1  :trate 0.3 :dur-numerator 12)
#+end_src


** load a different sound source
:PROPERTIES:
:header-args: :results silent
:END:

*** ideally there are no problems
On this machine there is the following file:

/Users/oi/Documents/sounds/slow-Indian-dulcimer-MONO.mp3

BUT, you need uncompressed audio!
Unable to read file - perhaps path is not a valid audio file (only ["wav" "aiff" "aif"] supported) : /Users/oi/Documents/sounds/slow-Indian-dulcimer-MONO.mp3

#+begin_src clojure
(def variation2 (load-sample (str path-to-sounds "slow-Indian-dulcimer-MONO.wav")))
#+end_src


#+begin_src clojure
(def line-for-variation2 (tgrains-line-synth :buffer 1))
#+end_src


#+begin_src clojure
(ctl line-for-variation2  :trate 0.3 :dur-numerator 12)
#+end_src




#+BEGIN_SRC clojure :results silent
  (defsynth tgrains-line-synth [buffer 0 trate 1 dur-numerator 8 amp 0.8 centerpos 0 duration-mult 2]
    (out 0 (pan2 
            (let [track-len (buf-dur:kr buffer)
                  trate trate
                  dur (/ dur-numerator trate)
                  clk (impulse:ar trate)
                  centerpos (line:kr centerpos track-len (* duration-mult track-len))  ]
              (t-grains:ar 1
                           clk
                           buffer
                           1
                           centerpos
                           dur
                           0
                           amp
                           2)))))
#+END_SRC

*** there are alwys problems






#+BEGIN_SRC clojure
(definst gran [] (play-buf 1 :bufnum 0))
#+END_SRC

#+begin_src clojure
(gran)
#+end_src

#+BEGIN_SRC clojure
(definst gran1 [] (play-buf 1 :bufnum 1))
#+END_SRC

#+begin_src clojure
(gran1)
#+end_src

*** change source file and start ordinary playback
#+begin_src clojure
(def variation3 (load-sample (str path-to-sounds "SHORT-slow-Indian-dulcimer-MONO.wav")))
#+end_src

  #+BEGIN_SRC clojure :session getting-started
(defsynth reverb-on-left []
  (let [dry (play-buf 1 variation3)
    wet (free-verb dry 1)]
    (out 0 [wet dry])))

(reverb-on-left)
  #+END_SRC

*** any difference between an inst and a synth def?
#+BEGIN_SRC clojure
(definst gran1 [] (play-buf 1 variation3))

(gran1)
#+END_SRC

*** try again with the granular synth using a line

#+begin_src clojure
(def line-for-variation2 (tgrains-line-synth variation3))
#+end_src

#+begin_src clojure
(ctl line-for-variation2  :trate 0.3 :dur-numerator 12)
#+end_src

*** further improve source

#+begin_src clojure
(def variation4 (load-sample (str path-to-sounds "30seconds-slow-Indian-dulcimer-MONO.wav")))
#+end_src

#+begin_src clojure
(def line-for-variation3 (tgrains-line-synth variation4))
#+end_src

* Medium quick
** now try to interact with buffer using MIDI
:PROPERTIES:
:header-args: :results silent
:END:

#+begin_src clojure
(midi-connected-devices)
#+end_src

#+BEGIN_SRC clojure :results silent
(def cc0-1-lo (atom 100))
(def cc0-1-hi (atom 1000))
(def cc0-2-lo (atom 1))
(def cc0-2-hi (atom 30))
(def cc0-3-lo (atom 0.1))
(def cc0-3-hi (atom 1))
(def cc0-4-lo (atom 0.1))
(def cc0-4-hi (atom 1000))


#+END_SRC

#+BEGIN_SRC clojure :results silent
    (defsynth mouse-rand-grain3
  "Summary of arglist: buffer; trate; amp; centerpos; AND then reverb args...
  roomsize; revtime; damping; inputbw; drylevel; earlyreflevel; taillevel; maxroomsize"
      [buffer 0 trate 1
       dur-numerator 12 amp 0.8
       centerpos 0 roomsize 10
       revtime 5 damping 0.5
       inputbw 0.2 drylevel 0.1
       earlyreflevel 0.7 taillevel 0.5
       maxroomsize 300]
      (let [trate (mouse-y:kr 0.5 20)
            track-len (buf-dur:kr buffer)
            dur (/ dur-numerator trate)
            clk (impulse:kr trate)
            line-centerpos (+ (mouse-x:kr 0 (buf-dur:kr buffer))
                              (line:kr 0 (* 0.5 track-len) (* 2 track-len))
                              (t-rand:kr 0 0.01 clk))]
        (out 0 (pan2 (g-verb  
                (t-grains:ar 1 clk buffer 1 ;; mouse x, line, rand, reverb
                             line-centerpos dur 
                             0 amp 2 ) )))))
#+END_SRC

#+BEGIN_SRC clojure :results output
(def pasdaction-grand (mouse-rand-grain3 variation4 :amp 0.1))
#+END_SRC

#+begin_src clojure
(ctl pasdaction-grand :amp 0.4 :trate 0.3 :dur-numerator 12)
#+end_src

#+BEGIN_SRC clojure :results silent
(defn cc-minilogue1-reverb [active-synth double-colon-name]
  (on-event
   [:midi :control-change]
   (fn [{cc-channel :note vel :velocity}]
     (case cc-channel
       16 (ctl active-synth :room16 (scale-range vel 1 127 0.1 10))
       17 (ctl active-synth :rev17 (scale-range vel 1 127 0.1 5))
       18 (ctl active-synth :damp18 (scale-range vel 1 127 0 1))
       19 (ctl active-synth :input19 (scale-range vel 1 127 0 1))
       20 (ctl active-synth :dry20 (scale-range vel 1 127 0.1 2))
       21 (ctl active-synth :early21 (scale-range vel 1 127 0.1 1))
       22 (ctl active-synth :tail22 (scale-range vel 1 127 0.1 1))
       23 (ctl active-synth :max23 (scale-range vel 1 127 1 400))
       43 (ctl active-synth :amp (scale-range vel 1 127 0.001 0.01))
       ))
   double-colon-name))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(cc-minilogue1-reverb short-a ::shortay)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(remove-event-handler ::shortay)
#+END_SRC
