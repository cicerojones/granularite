* Quick

** based on work in the other file with earlier granular-synth efforts

There is a lot of development work in an older file, not part of this project.

** have you got everything in order?

clojure and overtone installed and up and running with a MIDI controller connected?

#+begin_src clojure
(demo 10 (sin-osc (abs  (* 10000 (brown-noise:kr)))))
#+end_src

#+RESULTS:
: #<synth-node[loading]: granularite.cf44/audition-synth 33>

** 4-5 blocks to get brown-noise sound
:PROPERTIES:
:header-args: :results silent
:END:

*** need a NOT-HARDCODED-PATH to local sounds

#+begin_src clojure
  ;; (def local-machine "Users/oi")
    ;; (def path-to-sounds "/Applications/SuperCollider/SuperCollider.app/Contents/Resources/")
  ;; (def path-to-sounds (str local-machine "/Documents/sounds/"))
     ;; (def path-to-mono (str path-to-sounds "sounds/all-mono/"))
(def path-to-sounds (str "~/Documents/sounds/"))
#+end_src

"/Users/oi/Documents/sounds/brown30-mono.wav"

#+begin_src clojure
(def variation1 (load-sample (str path-to-sounds "brown30-mono.wav")))
#+end_src

#+BEGIN_SRC clojure :results silent
  (defsynth tgrains-line-synth [buffer 0 trate 1 dur-numerator 8 amp 0.8 centerpos 0 duration-mult 2]
    (out 0 (pan2 
            (let [track-len (buf-dur:kr buffer)
                  trate trate
                  dur (/ dur-numerator trate)
                  clk (impulse:ar trate)
                  centerpos (line:kr centerpos track-len (* duration-mult track-len))  ]
              (t-grains:ar 1
                           clk
                           buffer
                           1
                           centerpos
                           dur
                           0
                           amp
                           2)))))
#+END_SRC

#+begin_src clojure
(def line-for-variation1 (tgrains-line-synth :buffer 0))
#+end_src


#+begin_src clojure
(stop)
#+end_src


** make changes to the basic synth

#+begin_src clojure
(ctl line-for-variation1  :trate 0.3 :dur-numerator 12)
#+end_src




** load a different sound source
:PROPERTIES:
:header-args: :results silent
:END:

*** ideally there are no problems
On this machine there is the following file:

/Users/oi/Documents/sounds/slow-Indian-dulcimer-MONO.mp3

BUT, you need uncompressed audio!
Unable to read file - perhaps path is not a valid audio file (only ["wav" "aiff" "aif"] supported) : /Users/oi/Documents/sounds/slow-Indian-dulcimer-MONO.mp3


*** there are alwys problems

Don't show them here!

*** change source file and start ordinary playback

#+begin_src clojure
(def variation3 (load-sample (str path-to-sounds "SHORT-slow-Indian-dulcimer-MONO.wav")))
#+end_src

#+BEGIN_SRC clojure :session getting-started
(defsynth reverb-on-left []
  (let [dry (play-buf 1 variation3)
    wet (free-verb dry 1)]
    (out 0 [wet dry])))

(reverb-on-left)
  #+END_SRC

*** any difference between an inst and a synth def?

#+BEGIN_SRC clojure
(definst gran1 [] (play-buf 1 variation3))

(gran1)
#+END_SRC

*** try again with the granular synth using a line

#+begin_src clojure
(def line-for-variation2 (tgrains-line-synth variation3))
#+end_src

#+begin_src clojure
(ctl line-for-variation2  :trate 0.3 :dur-numerator 12)
#+end_src

*** further improve source

#+begin_src clojure
(def variation4 (load-sample (str path-to-sounds "30seconds-slow-Indian-dulcimer-MONO.wav")))
#+end_src

#+begin_src clojure
(def line-for-variation4 (tgrains-line-synth variation4))
#+end_src

* Medium quick

** to interact with buffer using MIDI, start with mouse
:PROPERTIES:
:header-args: :results silent
:END:

#+begin_src clojure
(midi-connected-devices)
#+end_src



#+BEGIN_SRC clojure :results silent
  (defsynth mouse-rand-grain3
    "Summary of arglist: buffer; trate; amp; centerpos; AND then reverb args...
  roomsize; revtime; damping; inputbw; drylevel; earlyreflevel; taillevel; maxroomsize"
    [buffer 0 trate 1
     dur-numerator 12 amp 0.8
     centerpos 0 roomsize 10
     revtime 5 damping 0.5
     inputbw 0.2 drylevel 0.1
     earlyreflevel 0.7 taillevel 0.5
     maxroomsize 300]
    (let [trate (mouse-y:kr 0.5 20)
	  track-len (buf-dur:kr buffer)
	  dur (/ dur-numerator trate)
	  clk (impulse:kr trate)
	  line-centerpos (+ (mouse-x:kr 0 (buf-dur:kr buffer))
			    (line:kr 0 (* 0.5 track-len) (* 2 track-len))
			    (t-rand:kr 0 0.01 clk))]
      (out 0 (pan2 (g-verb  
		    (t-grains:ar 1 clk buffer 1 ;; mouse x, line, rand, reverb
				 line-centerpos dur 
				 0 amp 2 ) )))))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(def pasdaction-grand (mouse-rand-grain3 variation4 :amp 0.1))
#+END_SRC

#+begin_src clojure
(ctl pasdaction-grand :amp 0.4 :trate 0.3 :dur-numerator 12)
#+end_src

#+begin_src clojure
(stop)
#+end_src

** see README for what the minilogue has
[[file:README.org][file:~/repos/granularite/README.org]]
[[file:README.org::*Minilogue complete CC numbers][Minilogue complete CC numbers]]

** begin setting up MIDI and refs

*** "simple" explanation
Explain ... in order understand what you want to do.

- changing knobs on the Minilogue
  - change aspects of the currently playing sound

So, this can happen a few different ways.

The last time I did this I relied on

- a particular synth defintion
- an event-handler function
  - this function relied on the synth being called with certain argument "prefixs"

*** set-up defintions

See the following link to all-apollos.

Provides context for understanding the use of "cc refs" in this function.

[[file:all-apollos.org][file:~/repos/granularite/all-apollos.org]]
[[id:ABD50379-307B-44F0-BA31-7540257029DC][minilogue for grains]]

#+NAME: minirand-ccgrain-no-line
#+BEGIN_SRC clojure :results silent
 (defsynth minirand-ccgrain-no-line
   "Summary of arglist: buffer; trate; amp; centerpos..."
   [buffer 0 
    cc34 1 ; trate
    cc35 12 ; numerator
    cc36 0 ; centerpos
    cc37 0.8 
    cc41 0.01]
   (let [trate cc34 ;;(mouse-y:kr 0.5 20)
         track-len (buf-dur:kr buffer)
         dur (/ cc35 trate)
         clk (impulse:kr trate)
         line-centerpos (+ cc36 (t-rand:kr 0 cc41 clk))
         ]
     (out 0 (pan2 
             (t-grains:ar 1 clk buffer 1 ;; cc rand arg, all minilogue cc args
                          line-centerpos dur
                          0 cc37 2)))))

#+END_SRC

#+NAME: cc-minilogue1-grains-event-handler
#+BEGIN_SRC clojure :results silent
(defn cc-minilogue1-grains [active-synth double-colon-name]
  (on-event
   [:midi :control-change]
   (fn [{cc-channel :note vel :velocity}]
     (case cc-channel
       34 (ctl active-synth :cc34 (scale-range vel 1 127 0.1 10))
       35 (ctl active-synth :cc35 (scale-range vel 1 127 1 24))
       36 (ctl active-synth :cc36 (scale-range vel 1 127 0 100)) 
;; consider the following for a choppier, but actual buf-dur length
;; (ctl active-synth :cc36 (scale-range vel 1 127 0 190))
       37 (ctl active-synth :cc37 (scale-range vel 1 127 0 1))
       41 (ctl active-synth :cc41 (scale-range vel 1 127 0.01 1))
       :else nil
       ))
   double-colon-name))
#+END_SRC

*** playback and realtime calls
#+NAME: apotheose-cloud
#+BEGIN_SRC clojure :results silent
(def obessive (minirand-ccgrain-no-line 1))
#+END_SRC

#+NAME: apotheose-cloud-handler
#+BEGIN_SRC clojure :results silent
(cc-minilogue1-grains obessive ::obess)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(remove-event-handler ::obess)
#+END_SRC


*** notes on controlling

VCO1 Shape is 36, which relatively quickly takes a noticeable effect.

It is used in the following way, affecting the center position

#+begin_src clojure
line-centerpos (+ cc36 (t-rand:kr 0 cc41 clk))
#+end_src

Cross-mod depth is 41, which is slow to take effect as part of the t-rand.

As it sets the "hi" value, it has a most noticeable effect on the "width", say, of the range of random numbers generated.

#+begin_src clojure
overtone.live/t-rand
([lo hi trig])
  
  [lo 0.0, hi 1.0, trig 0.0]

  lo   - Minimum value of generated float 
  hi   - Maximum value of generated float 
  trig - Trigger signal 

  Generates a random float value in uniform distribution 
  from lo to hi each time the trig signal changes from 
  nonpositive to positive values 

#+end_src



VCO1 Pitch is 34, which is slow to take effect and most noticeable after 36.

34 works as part of the "clk" to affect the rate at which the t-rand is triggered.

37 is the amplitude

35 is the "dur-numerator", which will affect the relative "duration" of each grain.

A low enough value creates a kind of "tremolo" effect of volume going in and out.

34 and 35 work together nicely.

A low enough value for 41 creates a largely "mechanical" effect, with the randomness eliminated.
** understanding the synths

*** documentation for t-grains

[[file:granulars-copied-from-post-tonal.org::*t-grains documentation][t-grains documentation]]

[[file:all-apollos.org][file:~/repos/granularite/all-apollos.org]]

#+begin_src clojure
		  [num-channels 2, ;; output
		   trigger 0, ;; "at each trigger"
		   bufnum 0, 
		   rate 1, ;; 2.0 octave up, 0.5 down, -1. backwards
		   center-pos 0, ;; position in seconds
		   dur 0.1, ;; duration of grain
		   pan 0.0, ;; -1 to 1, is left to right
		   amp 0.1, ;; amplitude of grain
		   interp 4 ;; interpolaltion can be none, linear, cubic
		   ]
#+end_src


| num-channels | x    |
| trigger      | x    |
| bufnum       | x    |
| rate         | cc34 |
| center-pos   | cc35 |
| dur          | cc36 |
| pan          | cc37 |
| amp          | cc41 |
| interp       |      |
